[{"C:\\Users\\lir6\\Desktop\\17214\\hw6c\\hw6-analytics-framework-teamhhs-main\\front_end\\src\\index.js":"1","C:\\Users\\lir6\\Desktop\\17214\\hw6c\\hw6-analytics-framework-teamhhs-main\\front_end\\src\\Board\\Form\\Form.js":"2","C:\\Users\\lir6\\Desktop\\17214\\hw6c\\hw6-analytics-framework-teamhhs-main\\front_end\\src\\Board\\Chart\\ChartFactory.js":"3"},{"size":882,"mtime":1638336803896,"results":"4","hashOfConfig":"5"},{"size":10717,"mtime":1638336804250,"results":"6","hashOfConfig":"5"},{"size":254,"mtime":1638336804017,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19c148g",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lir6\\Desktop\\17214\\hw6c\\hw6-analytics-framework-teamhhs-main\\front_end\\src\\index.js",[],"C:\\Users\\lir6\\Desktop\\17214\\hw6c\\hw6-analytics-framework-teamhhs-main\\front_end\\src\\Board\\Form\\Form.js",["15"],"import {useState} from \"react\";\nimport React, { Fragment } from 'react'\nimport \"./Form.css\"\nimport axios from 'axios';\nimport {Helmet} from \"react-helmet\";\nimport ChartFactory from \"../Chart/ChartFactory\";\n\nconst DynForm = () => {\n    const [dataSource, setDataSource] = useState([\n        {dataSourceName: '', dataSourceUrl: ''}\n    ]);\n\n    const [visSource, setVisSource] = useState([\n        {visSourceName: ''}\n    ]);\n\n    const [proLogic, setProLogic] = useState(\n        {startDate: '2018-07-01', endDate: '2021-12-31'}\n        );\n\n    const [graph, setGraph] = useState([\n    ]);\n\n    const handleInputChangeDName = (index, event) => {\n        const values = [...dataSource];\n        values[index].dataSourceName = event.target.value;\n        setDataSource(values);\n    };\n\n    const handleInputChangeDUrl = (index, event) => {\n        const values = [...dataSource];\n        values[index].dataSourceUrl = event.target.value;\n        setDataSource(values);\n    };\n\n    const handleInputChangeVName = (index, event) => {\n        const values = [...visSource];\n        values[index].visSourceName = event.target.value;\n        setVisSource(values);\n    };\n\n    const handleInputChangeStart = (event) => {\n        const new_proLogic = {...proLogic};\n        new_proLogic.startDate = event.target.value;\n        setProLogic(new_proLogic)\n        // console.log(new_proLogic)\n    };\n\n    const handleInputChangeEnd = (event) => {\n        const new_proLogic = {...proLogic};\n        new_proLogic.endDate = event.target.value;\n        setProLogic(new_proLogic)\n    };\n\n    const handleAddDFields = () => {\n        const values = [...dataSource];\n        values.push({ dataSourceName: '', dataSourceUrl: '' });\n        setDataSource(values);\n    };\n\n    const handleRemoveDFields = index => {\n        const values = [...dataSource];\n        values.splice(index, 1);\n        setDataSource(values);\n    };\n\n    const handleAddVFields = () => {\n        const values = [...visSource];\n        values.push({ visSourceName: ''});\n        setVisSource(values);\n    };\n\n    const handleRemoveVFields = index => {\n        const values = [...visSource];\n        values.splice(index, 1);\n        setVisSource(values);\n    };\n\n    const updateState = (data) => {\n        if (data.hasOwnProperty(\"errorMessage\")) {\n            alert(data.errorMessage);\n            return;\n        }\n\n        if (!data.hasOwnProperty(\"graph\")) {\n            alert(\"No graph\");\n            return;\n        }\n\n        setGraph(data.graph);\n    }\n\n    const updateStateDebug = (data) => {\n       const a =  [{\n           data:[{\n                    type: 'bar',\n                    x: [\"2021/08/17\",\"2021/11/21\",\"2021/11/22\"],\n                    y: [2,1.8690958164642377,2],\n                    connectgaps: true\n           }],\n           layout: {\n               xaxis: {\n                   title: 'Date of Comment',\n                   type: 'category',\n               },\n               yaxis: {\n                   title: 'Rate of Sentiment',\n                   range: [1.5, 2],\n               },\n               width: 320,\n               height: 240,\n               title: 'Bar Chart',\n               bargap: 0.3,\n           }\n       }];\n\n        setGraph(a);\n        console.log(\"debug\")\n    }\n\n\n    const renderGraph = (data) => {\n        let factory = new ChartFactory();\n\n        let graphs = []\n        for (let i = 0; i <= graph.length - 1; i ++) {\n            console.log(graph[i]);\n            graphs = graphs.concat(factory.produceChart(graph[i], i));\n        }\n\n        return (\n            <div>\n                <h className={\"config-header\"}>Result Graphs</h>\n                <hr/>\n                <br/>\n                {graphs}\n            </div>\n        )\n    }\n\n    const sendServer = (json) => {\n        // updateStateDebug(null);\n        axios.post(\"http://localhost:4000/inputPost\", json, {\n            headers: {\n                \"Access-Control-Allow-Origin\": \"*\",\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then((res) => {\n                updateState(res.data);\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        return null;\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        let new_json = {}\n        new_json.workSpace = [{}]\n        new_json.workSpace[0].dataSource = dataSource;\n        new_json.workSpace[0].visSource = visSource;\n        new_json.workSpace[0].processSource = {\n            \"filter\": proLogic\n        };\n\n        new_json = JSON.stringify(new_json);\n        console.log(\"new_json:\", new_json);\n\n        sendServer(new_json)\n    };\n\n    const renderData = e => {\n        return <div className=\"form-row\">\n            <h className={\"config-header\"}> Data Source Config</h>\n\n            {dataSource.map((inputField, index) => (\n                <Fragment key={`${inputField}~${index}`}>\n                    <div className=\"form-group col-sm-6\">\n                        <label htmlFor=\"dataSourceName\">Data Source Name\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                value={inputField.dataSourceName}\n                                placeholder={\"e.g. youtube/twitter/news\"}\n                                onChange={event => handleInputChangeDName(index, event)}\n                            />\n                        </label>\n                    </div>\n\n                    <div className=\"form-group col-sm-4\">\n                        <label htmlFor=\"dataSourceUrl\">Data Source Url\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                value={inputField.dataSourceUrl}\n                                placeholder={\"e.g. youtube url/twitter userid/keyword\"}\n                                onChange={event => handleInputChangeDUrl(index, event)}\n                            />\n                        </label>\n                    </div>\n\n                    <div className=\"form-group col-sm-2\">\n                        <button\n                            className=\"btn btn-link\"\n                            type=\"button\"\n                            onClick={() => handleRemoveDFields(index)}\n                        >\n                            -\n                        </button>\n                        <button\n                            className=\"btn btn-link\"\n                            type=\"button\"\n                            onClick={() => handleAddDFields()}\n                        >\n                            +\n                        </button>\n                    </div>\n\n                </Fragment>\n            ))}\n        </div>\n    };\n\n    const renderVis = e => {\n        return (\n            <div className=\"form-row\">\n                <hr/>\n                <h className={\"config-header\"}>Visualization Config</h>\n\n                {visSource.map((inputField, index) => (\n                    <Fragment key={`${inputField}~${index}`}>\n                        <div className=\"form-group col-sm-6\">\n                            <label htmlFor=\"visSourceName\">Chart Name\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    value={inputField.visSourceName}\n                                    placeholder={\"e.g. bar/pie/heapmap\"}\n                                    onChange={event => handleInputChangeVName(index, event)}\n                                />\n                            </label>\n                        </div>\n\n                        <div className=\"form-group col-sm-2\">\n                            <button\n                                className=\"btn btn-link\"\n                                type=\"button\"\n                                onClick={() => handleRemoveVFields(index)}\n                            >\n                                -\n                            </button>\n                            <button\n                                className=\"btn btn-link\"\n                                type=\"button\"\n                                onClick={() => handleAddVFields()}\n                            >\n                                +\n                            </button>\n                        </div>\n\n                    </Fragment>\n                ))\n                }\n        </div>\n        )\n    };\n\n    const renderPro = e => {\n        return (\n            <div className=\"form-row\">\n                <hr/>\n                <h className={\"config-header\"}>Filter Config</h>\n\n\n                <div className=\"form-group col-sm-6\">\n                    <label htmlFor=\"startDate\">Start Date\n                        <input type=\"date\" id=\"start\" name=\"trip-start\"\n                               value={proLogic.startDate}\n                               min=\"2016-01-01\" max=\"2021-12-31\"\n                               onChange={event => handleInputChangeStart(event)}/>\n                    </label>\n\n                    <label htmlFor=\"endDate\">End Date\n                        <input type=\"date\" id=\"end\" name=\"trip-end\"\n                               value={proLogic.endDate}\n                               min=\"2016-01-01\" max=\"2021-12-31\"\n                               onChange={event => handleInputChangeEnd(event)}/>\n                    </label>\n                </div>\n            </div>\n        )\n    };\n\n    return (\n        <>\n            <h1>Dynamic Panel for Data Analysis</h1>\n\n            <Helmet>\n                <script src=\"../Chart/jstest.js\"/>\n            </Helmet>\n\n            <div id=\"myDiv\">\n            </div>\n\n            <div className={\"dyn-form\"}>\n                <form onSubmit={handleSubmit}>\n                    {renderData()}\n                    <br/>\n                    <br/>\n\n                    {renderVis()}\n                    <br/>\n                    <br/>\n\n                    {renderPro()}\n                    <br/>\n\n                    <div className=\"submit-button\">\n                        <button\n                            className=\"btn btn-primary mr-2\"\n                            type=\"submit\"\n                            onSubmit={handleSubmit}\n                        >\n                            Submit\n                        </button>\n                    </div>\n\n                    <br/>\n                    <br/>\n                </form>\n            </div>\n\n            <div className={\"dyn-form\"}>\n                {renderGraph()}\n            </div>\n        </>\n    )\n\n\n\n}\nexport default DynForm;","C:\\Users\\lir6\\Desktop\\17214\\hw6c\\hw6-analytics-framework-teamhhs-main\\front_end\\src\\Board\\Chart\\ChartFactory.js",[],{"ruleId":"16","severity":1,"message":"17","line":93,"column":11,"nodeType":"18","messageId":"19","endLine":93,"endColumn":27},"no-unused-vars","'updateStateDebug' is assigned a value but never used.","Identifier","unusedVar"]